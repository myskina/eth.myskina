// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

/*
    REQUIREMENTS
    1. Your contract will have public variables that store the details about your token (Token Name, Token Symbol, Total Supply)
    2. Your contract will have a mapping of addresses to balances (address => uint)
    3. You will have a mint function that takes two parameters: an address (recipient) and a value (amount).
       The function then increases the total supply by that number and increases the balance
       of the recipient address by that amount.
    4. Your contract will have a burn function, which works the opposite of the mint function, as it will destroy tokens.
       It will take an address (account) and a value (amount) just like the mint functions. It will then deduct the value from the total supply
       and from the balance of the account.
    5. Lastly, your burn function should have conditionals to make sure the balance of the account is greater than or equal
       to the amount that is supposed to be burned. You can use a require statement for this check.
*/

contract MyAwesomeToken {

    // Public variables to store the details about the token
    string public tokenName = "My Awesome Token"; // Descriptive and unique name
    string public tokenSymbol = "MAT"; // Short and memorable abbreviation
    uint public totalTokenSupply; // Changed for consistency and clarity

    // Mapping to store balances
    mapping(address => uint) public balances;

    // Mint function to increase the total supply and balance of a given address
    function mint(address recipient, uint amount) public {
        totalTokenSupply += amount;
        balances[recipient] += amount;
    }

    // Burn function to decrease the total supply and balance of a given address
    function burn(address account, uint amount) public {
        require(balances[account] >= amount, "Insufficient balance for burning");
        totalTokenSupply -= amount;
        balances[account] -= amount;
    }
}
